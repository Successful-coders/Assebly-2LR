Microsoft (R) Macro Assembler Version 14.27.29112.0	    10/29/20 21:45:46
main.asm						     Page 1 - 1


				.386
				.model flat
				;.stack 4096

 00000000			.data
 00000000 00000000		flenght	dd 0
 00000004 00000000		slenght	dd 0
 00000008 00000000		help dd 0
 0000000C 00000000		string1 dd 0
 00000010 00000000		string2 dd 0
 00000014 00000000		pos dd 0
 00000000			.code

 00000000			@FUNC@20 proc
 00000000  55				push ebp ;сохраняем ebp при вызове
 00000001  8B EC			mov ebp, esp ;устанавливаем новое значение ebp

					;длина второй строки должна быть больше длины первой строки
 00000003  3B D1			cmp edx, ecx
 00000005  72 75			jb error

					;длина строки должна быть больше нуля
 00000007  01 0D 00000000 R		add flenght, ecx
 0000000D  83 3D 00000000 R		cmp flenght, 0
	   00
 00000014  76 66			jbe error

					; длина второй строки
 00000016  01 15 00000004 R		add slenght, edx
 0000001C  83 3D 00000004 R		cmp slenght, 0
	   00
 00000023  76 57			jbe error
 00000025  01 15 00000008 R		add help, edx

					;add string1, [ebp]+8 строка приемник, откуда берем символы
				 
					;add string2, [ebp]+12 сттрока в которой ищем

					;[ebp+16] - pos 
					
 0000002B  8B 75 0C			mov esi, [ebp]+12	;вторая строка
 0000002E  8B 7D 08			mov edi, [ebp]+8	;первая строка
 00000031  33 C0			xor eax, eax	;очищаем для заполнения символов
 00000033  33 E4			xor esp, esp	;очищаем для формирования индекса, чтобы потом вывести индекс символа первой строки, который будем выводить, если найдем
 00000035			FindSymbol: ;ищем символ
				;работает
 00000035  8A 07			mov al,[edi]	;берем символ первой строки 
 00000037  8A 0E			mov cl, [esi]	;берем символ второй строки
 00000039  3A C1			cmp al, cl	;сравниваем два символа
 0000003B  74 39			je found	;если символы равны, то переходим в found
 0000003D  46				inc esi		; переходим на следующий символ второй строки
 0000003E  FF 0D 00000004 R		dec slenght	; уменьшаем количесвто обрабатываемых символов
 00000044  83 3D 00000004 R		cmp slenght, 0	;сравниваем количество символов второй строки с нулем
	   00
 0000004B  77 E8			ja FindSymbol	;если символы еще есть, переходим к ним

					;если символы во второй строке закончились, переходим дальше
 0000004D  47				inc edi ;переходим на следующий символ первой строки
 0000004E  8B 75 0C			mov esi, [ebp]+12	;возвращаем в регистр esi вторую строку, чтобы снова обработать ее в сравнении с другим символом
 00000051  01 15 00000004 R		add slenght, edx	;возвращаем в переменную slenght максимальное кол-во символов второй строки
 00000057  83 C4 01			add esp ,1		;увеличиваем индекс на единицу
 0000005A  FF 0D 00000000 R		dec flenght		;уменьшаем кол-во символов первой строки
 00000060  83 3D 00000000 R		cmp flenght, 0	;проверяем закончились ли символы
	   00
 00000067  77 CC			ja FindSymbol	;если не закончились, переходим к дальнейшему анализу

				;добавить выход когда ничего не нашли
					
 00000069  33 C9			xor ecx, ecx
 0000006B  8B CD			mov ecx, ebp
 0000006D  59				pop ecx
 0000006E  B8 00000000			mov eax, 0
 00000073  C2 0004			ret 4
				;добавить когда нашли

 00000076			found:
 00000076  5D				pop ebp
 00000077  8B C4			mov eax, esp
 00000079  C2 0004			ret 4

 0000007C				error:
 0000007C  5D					pop ebp
 0000007D  B8 FFFFFFFF				mov eax, -1
 00000082  C2 0004				ret 4
 00000085			@FUNC@20 endp
				end
Microsoft (R) Macro Assembler Version 14.27.29112.0	    10/29/20 21:45:46
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000018 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000085 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@FUNC@20 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000085 Public
  FindSymbol . . . . . . . . . .	L Near	 00000035 _TEXT	
  found  . . . . . . . . . . . .	L Near	 00000076 _TEXT	
  error  . . . . . . . . . . . .	L Near	 0000007C _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
flenght  . . . . . . . . . . . .	DWord	 00000000 _DATA	
help . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
pos  . . . . . . . . . . . . . .	DWord	 00000014 _DATA	
slenght  . . . . . . . . . . . .	DWord	 00000004 _DATA	
string1  . . . . . . . . . . . .	DWord	 0000000C _DATA	
string2  . . . . . . . . . . . .	DWord	 00000010 _DATA	

	   0 Warnings
	   0 Errors
