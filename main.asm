.386
.model flat

.code

@FUNC@20 proc
	push ebp ;сохраняем ebp при вызове
	mov ebp, esp ;устанавливаем новое значение ebp

	;длина второй строки должна быть больше длины первой строки
	cmp edx, ecx
	jb error

	; длина второй строки
	mov ebx, edx
	

	
	mov edi, [ebp]+8	;первая строка
	mov esi, [ebp]+12	;вторая строка
	
FindSymbol: ;ищем символ

	mov eax, 0
	mov al,[edi]	;берем символ первой строки 
	mov ah, [esi]	;берем символ второй строки
	cmp al, ah	;сравниваем два символа
	je found	;если символы равны, то переходим в found
	inc esi		; переходим на следующий символ второй строки
	dec ebx		;уменьшаем кол-во символов первой строки
	cmp ebx, 0	;проверяем закончились ли символы
	ja FindSymbol	;если символы еще есть, переходим к ним

	;если символы во второй строке закончились, и символ не нашелся записываем его индекс в первую строку на его место
	;тут записать индекс в строку
	;mov eax, [ebp]+16
	;mov [edi],eax
found:
	inc edi ;переходим на следующий символ первой строки
	mov esi, [ebp]+12	;возвращаем в регистр esi вторую строку, чтобы снова обработать ее в сравнении с другим символом
	mov ebx, edx	;возвращаем в переменную slenght максимальное кол-во символов второй строки	
	inc eax
	mov [ebp]+16,eax
	dec ecx		;уменьшаем кол-во символов первой строки
	cmp ecx, 0	;проверяем закончились ли символы
	ja FindSymbol	;если не закончились, переходим к дальнейшему анализу

	; выход когда все закончили
	pop ebp
	mov eax, edi
	ret 12

	error:
		pop ebp
		mov eax, -1
		ret 12
@FUNC@20 endp
end